# 查询所有
GET _search
{
  "query": {
    "match_all": {}
  }
}

# 模拟请求es
GET /

# 测试分词器
POST /_analyze
{
  "analyzer": "ik_max_word",
  "text": ["黑马程序员学习java太棒了"]
}

# 测试分词器
POST /_analyze
{
  "analyzer": "ik_smart",
  "text": ["我是小小易，我在黑马程序员学习java， 加油！奥利给的！！！"]
}

# 创建索引库
PUT /xiaoxiaoyi
{
  "mappings": {
    "properties": {
      "info": {
        "type": "text",
        "analyzer": "ik_smart"
      },
      "email": {
        "type": "keyword",
        "index": false
      },
      "name": {
        "properties": {
          "firstName": {
            "type": "keyword"
          },
          "lastName": {
            "type": "keyword"
          }
        }
      }
    }
  }
}

# 查询索引库
GET /xiaoxiaoyi

# 删除索引库
DELETE /xiaoxiaoyi

# 修改索引库(添加属性)
PUT /xiaoxiaoyi/_mapping 
{
  "properties": {
    "age": {
      "type": "long"
    }
  }
}

# 插入新文档
POST /xiaoxiaoyi/_doc/1
{
  "age": 18,
  "email": "xiaoxiaoyi1026@gmail.com",
  "info": "小小易",
  "name": {
    "firstName": "小易",
    "lastName": "小"
  }
}

# 查询文档
GET /xiaoxiaoyi/_doc/1

# 删除文档
DELETE /xiaoxiaoyi/_doc/1


# 全量修改文档(覆盖)
PUT /xiaoxiaoyi/_doc/1
{
  "age": 22,
  "email": "xxy1026@gmail.com",
  "info": "小易",
  "name": {
    "firstName": "易",
    "lastName": "小"
  }
}

# 局部修改文档内容
POST /xiaoxiaoyi/_update/1
{
  "doc": {
    "age": 1
  }
}

PUT /hotel
{
  "mappings": {
    "properties": {
      "id": {
        "type": "keyword"
      },
      "name": {
        "type": "text",
        "analyzer": "ik_max_word",
        "copy_to": "all"
      },
      "address": {
        "type": "keyword",
        "index": false
      },
      "price": {
        "type": "integer",
        "copy_to": "all"
      },
      "score": {
        "type": "integer",
        "copy_to": "all"
      },
      "brand": {
        "type": "keyword",
        "copy_to": "all"
      },
      "city": {
        "type": "keyword",
        "copy_to": "all"
      },
      "starName": {
        "type": "keyword",
        "copy_to": "all"
      },
      "bushiness": {
        "type": "keyword",
        "copy_to": "all"
      },
      "location": {
        "type": "geo_point",
        "copy_to": "all"
      },
      "pic": {
        "type": "keyword",
        "index": false
      },
      "all": {
        "type": "text",
        "analyzer": "ik_max_word"
      }
    }
  }
}

GET /hotel

GET /hotel/_doc/56227

GET /hotel/_search

# 查询所有
GET /hotel/_search
{
  "query": {
    "match_all": {
      
    }
  }
}

# match条件查询(全文查询)
GET /hotel/_search
{
  "query": {
    "match": {
      "all": "上海外滩"
    }
  }
}

# multi_match多字段条件匹配
GET /hotel/_search
{
  "query": {
    "multi_match": {
      "query": "外滩如家",
      "fields": ["brand", "name", "bushiness"]
    }
  }
}


# term精确查询
GET /hotel/_search
{
  "query": {
    "term": {
      "city": {
        "value": "上海"
      }
    }
  }
}

# range范围精确查询 gt 大于 gte 大于等于 lt 小于 lte 小于等于
GET /hotel/_search
{
  "query": {
    "range": {
      "price": {
        "gte": 100,
        "lt": 259
      }
    }
  }
}


# distance查询(查询以location为圆心, 以distance为半径的符合条件的geo_point文档)
GET /hotel/_search
{
  "query": {
    "geo_distance": {
      "distance": "15km",
      "location": "31.21, 121.5"
    }
  }
}

# geo_bounding_box查询(查询一个矩形范围内的)
GET /hotel/_search 
{
  "query": {
    "geo_bounding_box": {
      "location": {
        "top_left": {
          "lat": 32.1,
          "lon": 121.5
        },
        "bottom_right": {
          "lat": 30.9,
          "lon": 121.7
        }
      }
    }
  }
}

# bool 查询 must和should要参与算分 must_not和filter不参与算分
GET /hotel/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "name": "如家"
          }
        }
      ],
      "must_not": [
        {
          "range": {
            "price": {
              "gt": 400
            }
          }
        }
      ],
      "filter": [
        {
          "geo_distance": {
            "distance": "10km",
            "location": {
              "lat": 31.21,
              "lon": 121.5
            }
          }
        }
      ]
    }
  }
}


# sort排序(对查询结果, 指定了sort后就不会打分了, _score为null)
GET /hotel/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "score": "desc"
    },
    {
      "price": "asc"
    }
  ]
}

# 分页查询, es默认要求查询的所有记录数不超过10000(from + size <= 10000)
GET /hotel/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "price": "asc"
    }
  ],
  "from": 0,
  "size": 10
}

# 高亮查询, es默认需要查询字段和高亮字段一致
GET /hotel/_search
{
  "query": {
    "match": {
      "all": "如家"
    }
  },
  "highlight": {
    "fields": {
      "name": {
        "require_field_match": "false"
      }
    }
  }
}

# 为几条数据添加isAD字段
POST /hotel/_update/365011120
{
  "doc": {
    "isAD": true
  }
}

POST /hotel/_update/593228
{
  "doc": {
    "isAD": true
  }
}

POST /hotel/_update/415659
{
  "doc": {
    "isAD": true
  }
}

POST /hotel/_update/706343
{
  "doc": {
    "isAD": true
  }
}

# 聚合功能 三要素: 聚合名称 聚合类型 聚合字段
GET /hotel/_search
{
  "size": 0,
  "aggs": {
    "brandAgg": {
      "terms": {
        "field": "brand",
        "size": 20
      }
    }
  }
}

# 聚合功能 自定义排序规则
GET /hotel/_search
{
  "size": 0,
  "aggs": {
    "brandAgg": {
      "terms": {
        "field": "brand",
        "order": {
          "_count": "asc"
        },
        "size": 20
      }
    }
  }
}


# 聚合功能 限定聚合范围
GET /hotel/_search
{
  "query": {
    "range": {
      "price": {
        "lt": 200
      }
    }
  },
  "size": 0,
  "aggs": {
    "brandAgg": {
      "terms": {
        "field": "brand",
        "size": 20
      }
    }
  }
}


# 聚合嵌套功能, 在聚合的基础上再聚合 metric
GET /hotel/_search
{
  "size": 0,
  "aggs": {
    "brandAgg": {
      "terms": {
        "field": "brand",
        "size": 20,
        "order": {
            "scoreAgg.avg": "desc"
        }
      },
      "aggs": {
        "scoreAgg": {
          "stats": {
            "field": "score"
          }
        }
      }
    }
  }
}

# 测试elastic search 启动成功与否
GET /

# 测试分词器(拼音分词器)
POST /test/_analyze
{
  "text": ["如家酒店还不错"],
  "analyzer": "my_analyzer"
}

// 自定义拼音分词器
PUT /test
{
  "settings": {
    "analysis": {
      "analyzer": {
        "my_analyzer": {
          "tokenizer": "ik_max_word",
          "filter": "py"
        }
      },
      "filter": {
        "py": {
          "type": "pinyin",
          "keep_full_pinyin": false,
          "keep_joined_full_pinyin": true,
          "keep_original": true,
          "limit_first_letter_length": 16,
          "remove_duplicated_term": true,
          "none_chinese_pinyin_tokenize": false
        }
      }
    }
  },
  "mappings": {
      "properties": {
        "name": {
          "type": "text",
          "analyzer": "my_analyzer",
          "search_analyzer": "ik_smart"
        }
      }
    }
}

POST /test/_doc/1
{
  "id": 1,
  "name": "狮子"
}
POST /test/_doc/2
{
  "id": 2,
  "name": "虱子"
}

# 定义搜索和分词用不同的分词器
GET /test/_search
{
  "query": {
    "match": {
      "name": "掉入狮子笼咋办"
    }
  }
}

# 自动补全索引
PUT test2
{
  "mappings": {
    "properties": {
      "title":{
        "type": "completion"
      }
    }
  }
}

# 测试数据
POST test2/_doc
{
  "title": ["Sony", "WH-1000XM3"]
}
POST test2/_doc
{
  "title": ["SK-II", "PITERA"]
}
POST test2/_doc
{
  "title": ["Nintendo", "switch"]
}

# 自动补全查询
POST /test2/_search
{
  "suggest": {
    "title_suggest": {
      "text": "s",
      "completion": {
        "field": "title",
        "skip_duplicates": true,
        "size": 10
      }
    }
  }
}

# 获取索引结构
GET hotel/_mapping

# 删除索引
DELETE /hotel

# 重新创建自动补全的酒店索引
PUT /hotel
{
  "settings": {
    "analysis": {
      "analyzer": {
        "text_analyzer": {
          "tokenizer": "ik_max_word",
          "filter": "py"
        },
        "completion_analyzer": {
          "tokenizer": "keyword",
          "filter": "py"
        }
      },
      "filter": {
        "py": {
          "type": "pinyin",
          "keep_full_pinyin": false,
          "keep_joined_full_pinyin": true,
          "keep_original": true,
          "limit_first_letter_length": 16,
          "remove_duplicated_term": true,
          "none_chinese_pinyin_tokenize": false
        }
      }
    }
  },
  "mappings": {
    "properties": {
      "id":{
        "type": "keyword"
      },
      "name":{
        "type": "text",
        "analyzer": "text_analyzer",
        "search_analyzer": "ik_smart",
        "copy_to": "all"
      },
      "address":{
        "type": "keyword",
        "index": false
      },
      "price":{
        "type": "integer"
      },
      "score":{
        "type": "integer"
      },
      "brand":{
        "type": "keyword",
        "copy_to": "all"
      },
      "city":{
        "type": "keyword"
      },
      "starName":{
        "type": "keyword"
      },
      "business":{
        "type": "keyword",
        "copy_to": "all"
      },
      "location":{
        "type": "geo_point"
      },
      "pic":{
        "type": "keyword",
        "index": false
      },
      "all":{
        "type": "text",
        "analyzer": "text_analyzer",
        "search_analyzer": "ik_smart"
      },
      "suggestion":{
          "type": "completion",
          "analyzer": "completion_analyzer"
      }
    }
  }
}

GET /hotel/_search
{
  "query": {
    "match_all": {}
  }
}

GET /hotel/_search
{
  "suggest": {
    "suggestions": {
      "text": "sd",
      "completion": {
        "field": "suggestion",
        "skip_duplicates": true,
        "size": 10
      }
    }
  }
}